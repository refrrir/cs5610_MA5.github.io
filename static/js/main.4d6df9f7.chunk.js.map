{"version":3,"sources":["components/square/index.jsx","components/board/index.jsx","reducers/boardReducer.js","reducers/reducer.js","reportWebVitals.js","index.js"],"names":["Square","props","dispatch","useDispatch","className","onClick","type","x","y","style","backgroundColor","symbol","Board","boardState","useSelector","state","board","count","squares","i","j","push","defaultState","combineReducers","action","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"oOAIe,SAASA,EAAOC,GAE3B,IAAMC,EAAWC,cACjB,OACI,qBAAKC,UAAU,SAASC,QAAS,kBAAMH,EACnC,CACII,KAAM,aACNC,EAAGN,EAAMM,EACTC,EAAGP,EAAMO,KAEdC,MAAO,CAAEC,gBAAkC,MAAjBT,EAAMU,OAAiB,QAAU,W,MCTvD,SAASC,IAMpB,IALA,IAAMC,EAAaC,aAAY,SAACC,GAAD,OAAWA,EAAMC,MAAMA,SAChDC,EAAQH,aAAY,SAACC,GAAD,OAAWA,EAAMC,MAAMC,SAE3CC,EAAU,GAEPC,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACnBF,EAAQG,KAAK,cAACrB,EAAD,CAA0BW,OAAQE,EAAWM,GAAGC,GAAIb,EAAGY,EAAGX,EAAGY,GAAhDD,EAAI,IAAMC,IAI5C,OACI,sBAAKhB,UAAU,kBAAf,UACI,uBAAMA,UAAU,QAAhB,oBAAgCa,KAChC,qBAAKb,UAAU,QAAf,SACKc,O,yBCrBXI,EAAe,CACjBN,MAAO,CACH,CAAC,GAAI,IACL,CAAC,GAAI,KAETC,MAAO,GCFIM,kBAAgB,CAC3BP,MDIW,WAEZ,IADCD,EACF,uDADUO,EAAcE,EACxB,uCACE,GAAoB,eAAhBA,EAAOlB,KAAuB,CAC9B,IAAMU,EAAQD,EAAMC,MACdS,EAAQT,EAAMQ,EAAOjB,GAAGiB,EAAOhB,GAQrC,MAPc,KAAViB,GACAT,EAAMQ,EAAOjB,GAAGiB,EAAOhB,GAAK,IAC5BO,EAAME,UAEND,EAAMQ,EAAOjB,GAAGiB,EAAOhB,GAAK,GAC5BO,EAAME,SAEH,2BAAIF,GAAX,IAAkBC,MAAM,YAAKA,KAEjC,OAAOD,KEXIW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCERQ,EAAQC,YAAYC,GAE1BC,IAASC,OACP,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAACvB,EAAD,MAEF4B,SAASC,eAAe,SAM1Bf,M","file":"static/js/main.4d6df9f7.chunk.js","sourcesContent":["import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport \"./index.css\";\nexport default function Square(props) {\n\n    const dispatch = useDispatch();\n    return (\n        <div className=\"square\" onClick={() => dispatch(\n            {\n                type: 'BoardClick',\n                x: props.x,\n                y: props.y,\n            }\n        )} style={{ backgroundColor: props.symbol === 'X' ? 'black' : 'white' }}>\n        </div>\n    );\n}","import React from 'react';\nimport  Square  from \"../square/index.jsx\";\nimport { useSelector } from 'react-redux';\n\nimport \"./index.css\";\nexport default function Board() {\n    const boardState = useSelector((state) => state.board.board);\n    const count = useSelector((state) => state.board.count);\n\n    const squares = [];\n\n    for (var i = 0; i < 2; i ++){\n        for (var j = 0; j < 2; j ++){\n            squares.push(<Square key={i + \"_\" + j} symbol={boardState[i][j]} x={i} y={j}/>); \n        }\n    }\n\n    return (\n        <div className=\"board-container\">\n            <span className=\"title\">Count: {count}</span>\n            <div className=\"board\">\n                {squares}\n            </div>\n        </div>\n    );\n}","const defaultState = {\n    board: [\n        ['', ''],\n        ['', ''],\n    ],\n    count: 0,\n};\n\nexport default function boardReducer(\n    state = defaultState, action\n) {\n    if (action.type === 'BoardClick') {\n        const board = state.board;\n        const value = board[action.x][action.y];\n        if (value === '') {\n            board[action.x][action.y] = 'X';\n            state.count ++;\n        } else {\n            board[action.x][action.y] = '';\n            state.count --;\n        }\n        return {...state, board: [...board]};\n    }\n    return state;\n}","import { combineReducers } from 'redux';\nimport boardReducer from './boardReducer';\n\nexport default combineReducers({\n    board: boardReducer,\n})","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Board from './components/board';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux'\nimport reducer from './reducers/reducer';\nimport reportWebVitals from './reportWebVitals';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store} >\n    <Board />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}